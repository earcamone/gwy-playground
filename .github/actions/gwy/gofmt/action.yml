name: 'Code Format Scan'
description: 'Checks Go code formatting with gofmt and optionally creates a PR with fixes'

inputs:
  token:
    description: 'Repository token for PR creation'
    required: false

  create-pr:
    description: 'Create a PR with gofmt fixes?'
    required: true
    default: 'true'

outputs:
  result:
    description: 'Result of the gofmt check (success or failed)'
    value: ${{ steps.check-gofmt.outputs.result }}

runs:
  using: 'composite'
  steps:
    - name: Initialize gofmt Check Environment
      shell: bash
      run: |
        # Initialize Code Format (gofmt) Check Environment
        GWY_SUMMARY=$RUNNER_TEMP/gofmt-summary.txt
        echo -e "## Format Scan" >> $GWY_SUMMARY
        
        # set annotations reusable title
        echo "GWY_TITLE=code format check" >> $GITHUB_ENV

        echo "GWY_SUMMARY=$GWY_SUMMARY" >> $GITHUB_ENV
        echo "GWY_FORMATTING_ISSUES=0" >> $GITHUB_ENV
        echo "GWY_ARTIFACT=$RUNNER_TEMP/format-report.md" >> $GITHUB_ENV
        echo "GWY_BRANCH=$(git branch --show-current)" >> $GITHUB_ENV
        sync

    - name: Check gofmt Formatting
      id: check-gofmt
      shell: bash --noprofile --norc +e -o pipefail {0}
      continue-on-error: true
      run: |
        # Check gofmt Formatting
        
        # Run gofmt and capture files needing fixes
        GWY_FORMATTING_ISSUES=$(timeout $GWY_TIMEOUT_SECONDS gofmt -l . | wc -l)
        echo "GWY_FORMATTING_ISSUES=$GWY_FORMATTING_ISSUES" >> $GITHUB_ENV
        
        # Generate list of files with required changes
        GWY_FORMATTING_FILES=$(gofmt -l .)
        
        # Apply fixes and capture diff if issues exist
        if [ $GWY_FORMATTING_ISSUES -ne 0 ]; then
          timeout $GWY_TIMEOUT_SECONDS gofmt -w .
          git diff -U0 > $GWY_ARTIFACT
        else
          echo "" > $GWY_ARTIFACT
        fi
        
        # Undo fixes if no PR requested
        if [ ${{ inputs.create-pr }} != "true" ] && [ $GWY_FORMATTING_ISSUES -ne 0 ]; then
          git restore .
        fi
        
        # Set action result based on formatting issues
        if [ $GWY_FORMATTING_ISSUES -ne 0 ]; then
          echo "result=failed" >> $GITHUB_OUTPUT
        else
          echo "result=success" >> $GITHUB_OUTPUT
        fi
        
        # Enhance summary, annotations, and debug output
        if [ $GWY_FORMATTING_ISSUES -ne 0 ]; then
          echo "::error title=$GWY_TITLE: $GWY_FORMATTING_ISSUES FORMATTING ISSUES FOUND::check summary or artifact report for more details"
          # Parse diff for exact change lines
          awk '
            BEGIN { RS = "diff --git"; FS = "\n" }
            /^ a/ {
              file = substr($1, 3)
              sub(/^a\//, "", file)
              sub(/ b\/.*/, "", file)
              for (i = 1; i <= NF; i++) {
                if ($i ~ /^@@ -[0-9]+ \+[0-9]+ @@/) {
                  line = $i
                  sub(/^@@ -[0-9]+ \+/, "", line)
                  sub(/ .*/, "", line)
                  break
                }
              }
              for (i = 1; i <= NF; i++) {
                if ($i ~ /^\+/) {
                  if ($i !~ /^\+ *$/) {
                    printf "  - [%s](https://github.com/%s/blob/%s/%s#L%s)\n", file, "'"$GITHUB_REPOSITORY"'", "'"$GWY_BRANCH"'", file, line >> "'"$GWY_SUMMARY"'"
                  }
                  break
                }
              }
            }
          ' $GWY_ARTIFACT
        else
          echo "::notice title=$GWY_TITLE: compliant code format::codebase is properly formatted"
          echo "  - no formatting issues detected" >> $GWY_SUMMARY
        fi
        
        cat $GWY_SUMMARY >> $GITHUB_STEP_SUMMARY

        # append to artifact gofmt diff output
        
        echo -e "\n\n## Format Fix Diff Output\n\n\`\`\`" >> $GWY_SUMMARY
        cat $GWY_ARTIFACT >> $GWY_SUMMARY
        echo -e "\`\`\`\n" >> $GWY_SUMMARY
        
        cat $GWY_SUMMARY_HEADING > $GWY_ARTIFACT
        cat $GWY_SUMMARY >> $GWY_ARTIFACT

    - name: Create PR with gofmt Fixes
      id: create-pr
      if: inputs.create-pr == 'true' && env.GWY_FORMATTING_ISSUES != '0'
      continue-on-error: true
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ inputs.token }}
        title: "[GWY/CI] Automatic code format fix (${{ env.GWY_BRANCH }})"
        body: "Fixes formatting issues in branch ${{ env.GWY_BRANCH }} found in ${{ env.GWY_FORMATTING_ISSUES }} files"
        commit-message: "[GWY/CI] Automatic gofmt fixes in ${{ env.GWY_FORMATTING_ISSUES }} files"
        branch: ${{ env.GWY_BRANCH }}-gofmt-fix

    - name: Notify PR Creation Result
      if: inputs.create-pr == 'true' && env.GWY_FORMATTING_ISSUES != '0'
      continue-on-error: true

      shell: bash --noprofile --norc +e -o pipefail {0}
      run: |
        # Check if PR was created successfully
        if [ "${{ steps.create-pr.outcome }}" == "success" ]; then
          echo "::notice title=$GWY_TITLE: PR created::PR with code format (gofmt) fixes created"
        else
          echo "::error title=$GWY_TITLE: ERROR CREATING PR::failed to create PR with code format (gofmt) fixes"
        fi

    - name: Upload gofmt Changes Artifact
      if: always()
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: gofmt-report
        path: ${{ env.GWY_ARTIFACT }}

    - name: Step Clean-Up
      if: always()
      shell: bash
      run: |
        # gofmt Check Clean-Up
        rm $GWY_ARTIFACT
        rm $GWY_SUMMARY
        
        # Unset variables
        unset GWY_TITLE
        unset GWY_BRANCH
        unset GWY_SUMMARY
        unset GWY_ARTIFACT
        unset GWY_TIMEOUT_SECONDS
        unset GWY_FORMATTING_FILES
        unset GWY_FORMATTING_ISSUES